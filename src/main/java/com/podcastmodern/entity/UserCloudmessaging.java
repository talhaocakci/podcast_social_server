package com.podcastmodern.entity;
// Generated Nov 18, 2015 1:35:40 PM by Hibernate Tools 4.0.0

import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * UserCloudmessaging generated by hbm2java
 */
@Entity
@Table(name = "user_cloudmessaging", catalog = "podcastmodern")
public class UserCloudmessaging implements java.io.Serializable {

	private UserCloudmessagingId id;
	private User user;
	private String registrationCode;
	private Date lastRefreshTime;

	public UserCloudmessaging() {
	}

	public UserCloudmessaging(UserCloudmessagingId id, User user) {
		this.id = id;
		this.user = user;
	}

	public UserCloudmessaging(UserCloudmessagingId id, User user, String registrationCode, Date lastRefreshTime) {
		this.id = id;
		this.user = user;
		this.registrationCode = registrationCode;
		this.lastRefreshTime = lastRefreshTime;
	}

	@EmbeddedId

	@AttributeOverrides({
			@AttributeOverride(name = "messagingId", column = @Column(name = "messaging_id", nullable = false) ),
			@AttributeOverride(name = "userId", column = @Column(name = "user_id", nullable = false) ) })
	public UserCloudmessagingId getId() {
		return this.id;
	}

	public void setId(UserCloudmessagingId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = false, insertable = false, updatable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "registration_code", length = 100)
	public String getRegistrationCode() {
		return this.registrationCode;
	}

	public void setRegistrationCode(String registrationCode) {
		this.registrationCode = registrationCode;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_refresh_time", length = 19)
	public Date getLastRefreshTime() {
		return this.lastRefreshTime;
	}

	public void setLastRefreshTime(Date lastRefreshTime) {
		this.lastRefreshTime = lastRefreshTime;
	}

}
